'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var valtio = require('valtio');

/**
 * useLocalProxy
 *
 * This is to create a proxy in a component at mount.
 * and discard it when the component unmounts.
 * It returns a tuple of snapshot and state.
 *
 * [Notes]
 * Valtio is designed for module state and this use case for component states
 * is not a primary target. It might not be ideal for such use cases.
 * For component state, alternatively consider using
 * [useImmer](https://github.com/immerjs/use-immer).
 */

var useLocalProxy = function useLocalProxy(init) {
  var ref = react.useRef();

  if (!ref.current) {
    var initialObject = typeof init === 'function' ? init() : init;
    ref.current = valtio.proxy(initialObject);
  }

  return [valtio.useProxy(ref.current), ref.current];
};
/**
 * subscribeKey
 *
 * The subscribeKey utility enables subscription to a primitive subproperty of a given state proxy.
 * Subscriptions created with subscribeKey will only fire when the specified property changes.
 *
 * @example
 * import { subscribeKey } from 'valtio/utils'
 * subscribeKey(state, 'count', (v) => console.log('state.count has changed to', v))
 */

var subscribeKey = function subscribeKey(proxyObject, key, callback) {
  var prevValue = proxyObject[key];
  return valtio.subscribe(proxyObject, function () {
    var nextValue = proxyObject[key];

    if (!Object.is(prevValue, nextValue)) {
      callback(prevValue = nextValue);
    }
  });
};

exports.subscribeKey = subscribeKey;
exports.useLocalProxy = useLocalProxy;
